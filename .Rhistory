}
## add user asked taxonomy_level
blast_output_tbl <- blast_output_tbl %>%
dplyr::left_join(taxid_to_taxon , by = c("taxid" = "query_taxon"))
return(blast_output_tbl)
}
## demo data
blast_tbl_output_demo <- tibble::tribble(
~query_acc_ver, ~subject_acc_ver, ~identity, ~alignment_length, ~mismatches, ~gap_opens, ~q_start, ~q_end, ~s_start, ~s_end,   ~evalue, ~bit_score, ~positives,
"XP_659970.1",    "XP_659970.1",       100,              249L,          0L,         0L,       1L,   249L,       1L,   249L, 3.88e-179,       501L,        100,
"XP_659970.1", "XP_026603610.1",    84.348,              230L,         36L,         0L,      20L,   249L,     163L,   392L, 1.15e-139,       407L,      92.17,
"XP_659970.1",     "OJI98846.1",    73.494,              249L,         63L,         1L,       1L,   249L,       1L,   246L, 7.34e-124,       361L,      83.13,
"XP_659970.1",     "OJJ64742.1",      70.4,              250L,         70L,         2L,       1L,   249L,       1L,   247L, 4.58e-119,       349L,         82,
"XP_659970.1",     "CEL09341.1",    71.486,              249L,         68L,         2L,       1L,   249L,       1L,   246L,  3.7e-118,       347L,      81.93,
"XP_659970.1",     "KGO68710.1",    54.585,              229L,        103L,         1L,      22L,   249L,      19L,   247L,  9.65e-82,       254L,      70.31
)
blast_tbl_output_demo
blast_tbl_output_demo %>% dplyr::select()
blast_tbl_output_demo %>% dplyr::select(2)
blast_tbl_output_demo %>% dplyr::select(2) %>% dplyr::rename(id_Col = subject_acc_ver)
blast_tbl_output_demo %>% dplyr::select(2) %>% dplyr::rename(id_Col = subject_acc_ver) %>% add_taxonomy_columns(subject_acc_colname = "subject_acc_ver")
blast_tbl_output_demo %>% dplyr::select(2) %>% dplyr::rename(id_Col = subject_acc_ver) %>% add_taxonomy_columns(subject_acc_colname = "id_Col")
#'
#' @return
#' @export
#' @importFrom tibble is_tibble
#' @importFrom rlang arg_match
#' @importFrom cli cat_rule cli_alert_info cli_alert
#' @importFrom dplyr pull select bind_rows select rename left_join right_join
#' @importFrom purrr map
#' @importFrom TidyWrappers tbl_keep_rows_NA_any
#' @examples
add_taxonomy_columns <- function(tbl,
ncbi_accession_colname = "ncbi_accession",
ncbi_acc_key =NULL,
taxonomy_level = "kingdom",
map_superkindom = TRUE,
batch_size = 20 ){
## validate user inputs
## blast_output_tbl must be tbl
if(!tibble::is_tibble(blast_output_tbl)){
stop("blast_output_tbl must be a class of tibble")
}
## taxonomy_level must be one one of these
rlang::arg_match(taxonomy_level  ,
c("no rank", "superkingdom", "kingdom", "phylum", "subphylum", "class", "subclass", "infraclass", "cohort", "order", "suborder", "infraorder", "superfamily", "family", "subfamily", "genus", "species", "tribe"))
## blast_output_tbl mus not contain column names 'taxid' and taxonomy_level
if(any(colnames(blast_output_tbl) %in% c(taxonomy_level))) {
stop("Column '", taxonomy_level ,"'" , " must not present in 'blast_output_tbl'.",
" Either remove it or rename it")
}
ncbi_accession_colname <- rlang::sym(ncbi_accession_colname)
is_taxid_present <- FALSE
if(any(colnames(blast_output_tbl) %in% "taxid")) {
is_taxid_present <- TRUE
cli::cat_rule("WARNING")
cli::cli_alert_info("As column 'taxid' present in blast output tbl, same will be used to map taxonomy level.")
cli::cli_alert_info("To perform new 'taxid' search either remove  or rename columnn 'taxid'." )
cli::cat_rule("WARNING ENDS")
}
## get subject accession
subject_acc_id <- blast_output_tbl %>%
dplyr::pull(!!ncbi_accession_colname) %>%
unique()
if(is_taxid_present){
taxon_data_sub <- blast_output_tbl %>%
dplyr::select(!!ncbi_accession_colname , taxid)
} else{
## get taxid for each subject hit
taxon_data <- phyloR::genbank2uid_tbl(subject_acc_id,key = ncbi_acc_key, batch_size = batch_size)
## list of tbl to tbl
taxon_data_sub <- taxon_data %>%
dplyr::bind_rows() %>%
dplyr::select(1,2) %>%
dplyr::rename(!!ncbi_accession_colname := "x")
}
## get kingdom
taxid_to_taxon <- phyloR::get_taxon_rank(taxon_data_sub$taxid , rank = taxonomy_level) %>%
dplyr::select(1,2)
##if kingdom is NA map superkingdom
if(map_superkindom && taxonomy_level=="kingdom"){
if(nrow(taxid_to_taxon %>% TidyWrappers::tbl_keep_rows_NA_any()) >=1 ){
skingdom_query <- taxid_to_taxon %>% TidyWrappers::tbl_keep_rows_NA_any() %>% dplyr::pull(query_taxon)
taxid_to_skingdom <- phyloR::get_taxon_rank(skingdom_query , rank = "superkingdom") %>% dplyr::select(1,2)
taxid_to_taxon <- taxid_to_taxon %>% dplyr::left_join(taxid_to_skingdom , by = "query_taxon") %>%
dplyr::mutate(kingdom = dplyr::coalesce(kingdom, superkingdom)) %>% dplyr::select(1,2)
}
}
## add column taxid if it is not present in original data
if(!is_taxid_present){
blast_output_tbl <- blast_output_tbl %>%
dplyr::left_join(taxon_data_sub , by = rlang::as_name(ncbi_accession_colname))
}
## add user asked taxonomy_level
blast_output_tbl <- blast_output_tbl %>%
dplyr::left_join(taxid_to_taxon , by = c("taxid" = "query_taxon"))
return(blast_output_tbl)
}
add_taxonomy_columns(blast_output_tbl = blast_tbl_output_demo , ncbi_accession_colname = "subject_acc_ver")
add_taxonomy_columns(tbl = blast_tbl_output_demo , ncbi_accession_colname = "subject_acc_ver")
rm(list = ls())
#'
#' @return
#' @export
#' @importFrom tibble is_tibble
#' @importFrom rlang arg_match
#' @importFrom cli cat_rule cli_alert_info cli_alert
#' @importFrom dplyr pull select bind_rows select rename left_join right_join
#' @importFrom purrr map
#' @importFrom TidyWrappers tbl_keep_rows_NA_any
#' @examples
add_taxonomy_columns <- function(tbl,
ncbi_accession_colname = "ncbi_accession",
ncbi_acc_key =NULL,
taxonomy_level = "kingdom",
map_superkindom = TRUE,
batch_size = 20 ){
## validate user inputs
## tbl must be tbl
if(!tibble::is_tibble(tbl)){
stop("blast_output_tbl must be a class of tibble")
}
## taxonomy_level must be one one of these
rlang::arg_match(taxonomy_level  ,
c("no rank", "superkingdom", "kingdom", "phylum", "subphylum", "class", "subclass", "infraclass", "cohort", "order", "suborder", "infraorder", "superfamily", "family", "subfamily", "genus", "species", "tribe"))
## blast_output_tbl mus not contain column names 'taxid' and taxonomy_level
if(any(colnames(tbl) %in% c(taxonomy_level))) {
stop("Column '", taxonomy_level ,"'" , " must not present in 'blast_output_tbl'.",
" Either remove it or rename it")
}
ncbi_accession_colname <- rlang::sym(ncbi_accession_colname)
is_taxid_present <- FALSE
if(any(colnames(tbl) %in% "taxid")) {
is_taxid_present <- TRUE
cli::cat_rule("WARNING")
cli::cli_alert_info("As column 'taxid' present in blast output tbl, same will be used to map taxonomy level.")
cli::cli_alert_info("To perform new 'taxid' search either remove  or rename columnn 'taxid'." )
cli::cat_rule("WARNING ENDS")
}
## get subject accession
ncbi_acc <- tbl %>%
dplyr::pull(!!ncbi_accession_colname) %>%
unique()
if(is_taxid_present){
taxon_data_sub <- tbl %>%
dplyr::select(!!ncbi_accession_colname , taxid)
} else{
## get taxid for each subject hit
taxon_data <- phyloR::genbank2uid_tbl(ncbi_acc,key = ncbi_acc_key, batch_size = batch_size)
## list of tbl to tbl
taxon_data_sub <- taxon_data %>%
dplyr::bind_rows() %>%
dplyr::select(1,2) %>%
dplyr::rename(!!ncbi_accession_colname := "x")
}
## get kingdom
taxid_to_taxon <- phyloR::get_taxon_rank(taxon_data_sub$taxid , rank = taxonomy_level) %>%
dplyr::select(1,2)
##if kingdom is NA map superkingdom
if(map_superkindom && taxonomy_level=="kingdom"){
if(nrow(taxid_to_taxon %>% TidyWrappers::tbl_keep_rows_NA_any()) >=1 ){
skingdom_query <- taxid_to_taxon %>% TidyWrappers::tbl_keep_rows_NA_any() %>% dplyr::pull(query_taxon)
taxid_to_skingdom <- phyloR::get_taxon_rank(skingdom_query , rank = "superkingdom") %>% dplyr::select(1,2)
taxid_to_taxon <- taxid_to_taxon %>% dplyr::left_join(taxid_to_skingdom , by = "query_taxon") %>%
dplyr::mutate(kingdom = dplyr::coalesce(kingdom, superkingdom)) %>% dplyr::select(1,2)
}
}
## add column taxid if it is not present in original data
if(!is_taxid_present){
tbl <- tbl %>%
dplyr::left_join(taxon_data_sub , by = rlang::as_name(ncbi_accession_colname))
}
## add user asked taxonomy_level
tbl <- tbl %>%
dplyr::left_join(taxid_to_taxon , by = c("taxid" = "query_taxon"))
return(tbl)
}
## demo data
blast_tbl_output_demo <- tibble::tribble(
~query_acc_ver, ~subject_acc_ver, ~identity, ~alignment_length, ~mismatches, ~gap_opens, ~q_start, ~q_end, ~s_start, ~s_end,   ~evalue, ~bit_score, ~positives,
"XP_659970.1",    "XP_659970.1",       100,              249L,          0L,         0L,       1L,   249L,       1L,   249L, 3.88e-179,       501L,        100,
"XP_659970.1", "XP_026603610.1",    84.348,              230L,         36L,         0L,      20L,   249L,     163L,   392L, 1.15e-139,       407L,      92.17,
"XP_659970.1",     "OJI98846.1",    73.494,              249L,         63L,         1L,       1L,   249L,       1L,   246L, 7.34e-124,       361L,      83.13,
"XP_659970.1",     "OJJ64742.1",      70.4,              250L,         70L,         2L,       1L,   249L,       1L,   247L, 4.58e-119,       349L,         82,
"XP_659970.1",     "CEL09341.1",    71.486,              249L,         68L,         2L,       1L,   249L,       1L,   246L,  3.7e-118,       347L,      81.93,
"XP_659970.1",     "KGO68710.1",    54.585,              229L,        103L,         1L,      22L,   249L,      19L,   247L,  9.65e-82,       254L,      70.31
)
add_taxonomy_columns(tbl = blast_tbl_output_demo)
add_taxonomy_columns(tbl = blast_tbl_output_demo , ncbi_accession_colname = "subject_accession_ver")
add_taxonomy_columns(tbl = blast_tbl_output_demo , ncbi_accession_colname = "subject_acc_ver")
stop(glue::glue("'tbl' must contains column {ncbi_accession_colname}. Use argument 'ncbi_accession_colname' a column containing nacbi accession from 'tbl'"))
ncbi_accession_colname = "ncbi_accession"
glue::glue("'tbl' must contains column {ncbi_accession_colname}. Use argument 'ncbi_accession_colname' a column containing nacbi accession from 'tbl'")
glue::glue("'tbl' must contains column {ncbi_accession_colname}. Use argument 'ncbi_accession_colname' to specify a column containing nacbi accession from 'tbl'")
glue::glue("'tbl' must contains column {ncbi_accession_colname}. Use argument 'ncbi_accession_colname' to specify a column containing valid ncbi accession in 'tbl'")
glue::glue_data("'tbl' must contains column '{ncbi_accession_colname}'. Use argument 'ncbi_accession_colname' to specify a column containing valid ncbi accession in 'tbl'")
glue::glue("'tbl' must contains column '{ncbi_accession_colname}'. Use argument 'ncbi_accession_colname' to specify a column containing valid ncbi accession in 'tbl'")
glue::glue("'tbl' must contains column '{ncbi_accession_colname}'. Use argument 'ncbi_accession_colname' to specify a column containing valid ncbi accession in a 'tbl'"
ncbi_accession_colname
ncbi_accession_colname %in% colnames(tbl)
## demo data
blast_tbl_output_demo <- tibble::tribble(
~query_acc_ver, ~subject_acc_ver, ~identity, ~alignment_length, ~mismatches, ~gap_opens, ~q_start, ~q_end, ~s_start, ~s_end,   ~evalue, ~bit_score, ~positives,
"XP_659970.1",    "XP_659970.1",       100,              249L,          0L,         0L,       1L,   249L,       1L,   249L, 3.88e-179,       501L,        100,
"XP_659970.1", "XP_026603610.1",    84.348,              230L,         36L,         0L,      20L,   249L,     163L,   392L, 1.15e-139,       407L,      92.17,
"XP_659970.1",     "OJI98846.1",    73.494,              249L,         63L,         1L,       1L,   249L,       1L,   246L, 7.34e-124,       361L,      83.13,
"XP_659970.1",     "OJJ64742.1",      70.4,              250L,         70L,         2L,       1L,   249L,       1L,   247L, 4.58e-119,       349L,         82,
"XP_659970.1",     "CEL09341.1",    71.486,              249L,         68L,         2L,       1L,   249L,       1L,   246L,  3.7e-118,       347L,      81.93,
"XP_659970.1",     "KGO68710.1",    54.585,              229L,        103L,         1L,      22L,   249L,      19L,   247L,  9.65e-82,       254L,      70.31
)
tbl = blast_tbl_output_demo
ncbi_accession_colname = "ncbi_accession"
ncbi_acc_key =NULL
taxonomy_level = "kingdom"
map_superkindom = TRUE
batch_size = 20
## validate user inputs
## tbl must be tbl
if(!tibble::is_tibble(tbl)){
stop("blast_output_tbl must be a class of tibble")
}
## taxonomy_level must be one one of these
rlang::arg_match(taxonomy_level  ,
c("no rank", "superkingdom", "kingdom", "phylum", "subphylum", "class", "subclass", "infraclass", "cohort", "order", "suborder", "infraorder", "superfamily", "family", "subfamily", "genus", "species", "tribe"))
## blast_output_tbl mus not contain column names 'taxid' and taxonomy_level
if(any(colnames(tbl) %in% c(taxonomy_level))) {
stop("Column '", taxonomy_level ,"'" , " must not present in 'blast_output_tbl'.",
" Either remove it or rename it")
}
ncbi_accession_colname <- rlang::sym(ncbi_accession_colname)
## ncbi_accession_colname must present in the tbl.
if(!rlang::as_name(ncbi_accession_colname %in% colnames(tbl))){
stop(glue::glue("'tbl' must contains column '{ncbi_accession_colname}'. Use argument 'ncbi_accession_colname' to specify a column containing valid ncbi accession in a 'tbl'"))
}
## ncbi_accession_colname must present in the tbl.
if(!rlang::as_name(ncbi_accession_colname) %in% colnames(tbl)){
stop(glue::glue("'tbl' must contains column '{ncbi_accession_colname}'. Use argument 'ncbi_accession_colname' to specify a column containing valid ncbi accession in a 'tbl'"))
}
rm(list = ls())
roxygen2::roxygenise()
roxygen2::roxygenise()
rnorm(100)
rnorm(100) %>% stderr()
rnorm(100) %>% stderr(.)
stderr(rnorm(100))
?stderr()
stats::t.test(rnorm(100))
?stats::t.test
install.packages("pkgdown")
pkgdown::build_site()
pkgdown::build_site()
system.file("blast_output_01" , package = "phyloR")
system.file("blast_output_01", "inst/extdata" , package = "phyloR")
system.file("blast_output_01"" , package = "phyloR")
system.file("blast_output_01.txt" , package = "phyloR")
?system.file
system.file("blast_output_01.txt", "extdata" , package = "phyloR")
system.file("blast_output_01.txt", "inst" ,"extdata" , package = "phyloR")
system.file("blast_output_01.txt" , package = "phyloR")
library(phyloR)
system.file("blast_output_01.txt" , package = "phyloR")
system.file("blast_output_01.txt", "inst" ,"extdata" , package = "phyloR")
devtools::build()
library(phyloR)
system.file( "extdata",blast_output_01.txt" , package = "phyloR")
system.file("extdata","blast_output_01.txt" ,package = "phyloR")
system.file("blast_output_01.txt" ,package = "phyloR")
system.file("extdata","blast_output_01.txt" ,package = "phyloR")
f <- system.file("extdata","blast_output_01", package = "phyloR")
d <- readr::read_delim(f, delim ="\t" , col_names = F)
f <- system.file("extdata","blast_output_01", package = "phyloR")
f
f <- system.file("extdata","blast_output_01", package = "phyloR")
f
system.file("extdata","blast_output_01.txt" ,package = "phyloR")
f <- system.file("extdata","blast_output_01.txt" ,package = "phyloR")
d <- readr::read_delim(f, delim ="\t" , col_names = F)
d
colnames(d) <- phyloR::get_blast_outformat_7_colnames()
filtered <- filter_blast_hits(d , query_cov = 90 , identity = 40, query_length = 249, evalue = 1e-6)
filtered
filtered
d
d %>% remove_redundant_hits()
remove_redundant_hits(d)
d
remove_redundant_hits(d)
library(magrittr)
d %>% add_taxonomy_columns()
d
d %>% add_taxonomy_columns(ncbi_accession_colname ="subject_acc_ver" )
d %>%  dplyr::slice(1:50) %>% add_taxonomy_columns(ncbi_accession_colname ="subject_acc_ver" )
with_kingdom <- .Last.value
with_kingdom_and_species <- with_kingdom %>%  dplyr::slice(1:50) %>% add_taxonomy_columns(ncbi_accession_colname ="subject_acc_ver" )
with_kingdom_and_species <- with_kingdom %>% add_taxonomy_columns(ncbi_accession_colname ="subject_acc_ver" )
with_kingdom_and_species <- with_kingdom %>% add_taxonomy_columns(ncbi_accession_colname ="subject_acc_ver",
taxonomy_level = "species")
with_kingdom_and_species
dplyr::glimpse(with_kingdom_and_species)
library(phyloR)
f <- system.file("extdata","blast_output_01.txt" ,package = "phyloR")
f
d <- readr::read_delim(f, delim ="\t" , col_names = F)
d <- readr::read_delim(f, delim ="\t" , col_names = F , comment = "#")
f <- system.file("extdata","blast_output_01.txt" ,package = "phyloR")
d <- readr::read_delim(f, delim ="\t" , col_names = F , comment = "#")
colnames(d) <- phyloR::get_blast_outformat_7_colnames()
d %>% format_fasta_headers()
f %>% format_fasta_headers()
f <- system.file("extdata","blast_output_01.fasta" ,package = "phyloR")
f %>% format_fasta_headers()
Biostrings::readAAStringSet(f)
Biostrings::readAAStringSet(f) %>% names()
Biostrings::readAAStringSet(f) %>% names() %>% head()
f %>% format_fasta_headers() %>% names() %>% head()
Biostrings::readAAStringSet(f) %>% names() %>% head()
f <- system.file("extdata" ,"blast_output_01.txt" , package ="phyloR)
f
f <- system.file("extdata" ,"blast_output_01.txt" , package ="phyloR")
f
x <- system.file("extdata" ,"blast_output_01.txt" , package ="phyloR") %>% read_delim(delim ="\t",comet ="#")
x <- system.file("extdata" ,"blast_output_01.txt" , package ="phyloR") %>%
readr::read_delim(delim ="\t",comet ="#")
x <- system.file("extdata" ,"blast_output_01.txt" , package ="phyloR") %>%
readr::read_delim(delim ="\t",comment ="#")
#' \enumerate{
#' \item TRUE : return sequences if element of x matches anywhere in the headers of y.
#' \item FALSE : return sequences only of exact match occur between element of x and headers of y.
#' }
#'
#' @return an object of class BStringset
#' @export
#' @importFrom purrr map
#' @importFrom stringr str_which fixed
#' @examples
x <- system.file("extdata" ,"blast_output_01.txt" , package ="phyloR") %>%
readr::read_delim(delim ="\t",comment ="#", header= F)
x <- system.file("extdata" ,"blast_output_01.txt" , package ="phyloR") %>%
readr::read_delim(delim ="\t",comment ="#", col_names = F)
x
x <- system.file("extdata" ,"blast_output_01.txt" , package ="phyloR") %>%
readr::read_delim(delim ="\t",comment ="#", col_names = F) %>% sample(X2,20)
x <- system.file("extdata" ,"blast_output_01.txt" , package ="phyloR") %>%
readr::read_delim(delim ="\t",comment ="#", col_names = F) %>% sample(.$X2,20)
#' \enumerate{
#' \item TRUE : return sequences if element of x matches anywhere in the headers of y.
#' \item FALSE : return sequences only of exact match occur between element of x and headers of y.
#' }
#'
#' @return an object of class BStringset
#' @export
#' @importFrom purrr map
#' @importFrom stringr str_which fixed
#' @examples
x <- system.file("extdata" ,"blast_output_01.txt" , package ="phyloR") %>%
readr::read_delim(delim ="\t",comment ="#", col_names = F) %>% pull(X2)%>%sample(20)
#' \enumerate{
#' \item TRUE : return sequences if element of x matches anywhere in the headers of y.
#' \item FALSE : return sequences only of exact match occur between element of x and headers of y.
#' }
#'
#' @return an object of class BStringset
#' @export
#' @importFrom purrr map
#' @importFrom stringr str_which fixed
#' @examples
x <- system.file("extdata" ,"blast_output_01.txt" , package ="phyloR") %>%
readr::read_delim(delim ="\t",comment ="#", col_names = F) %>% dplyr::pull(X2)%>%sample(20)
x
x %>% clipr::clear_clip()
x %>% clipr::clear_clip()
x %>% clipr::write_clip()
y <- system.file("extdata" ,"blast_output_01.fasta")
y
y <- system.file("extdata" ,"blast_output_01.fasta" , package = "phyloR")
y
y_file <- system.file("extdata" ,"blast_output_01.fasta" , package = "phyloR")
y <- Biostrings::readAAStringSet(y_file)
y
## subset fasta by partial match
sub <- phyloR::subset_bstringset(x = x , y = y ,partial_match = T)
y
y <- Biostrings::readBStringSet(y_file)
## subset fasta by partial match
sub <- phyloR::subset_bstringset(x = x , y = y ,partial_match = T)
sub
roxygen2::roxygenise()
library(phyloR)
?phyloR::subset_bstringset()
rm(list = ls())
x <-  c("EIT75269.1", "TGO19408.1", "KAF2153260.1", "OAA41719.1", "OSS52177.1", "XP_018252424.1", "XP_008598593.1", "KXN65110.1", "XP_018147989.1", "XP_022493698.1", "RII05464.1", "XP_018703519.1", "RZR67285.1", "OLY78428.1", "XP_007819064.1", "PQK17331.1", "KXN66278.1", "CRK21695.1", "CVK85925.1", "KID81639.1")
y_file <- system.file("extdata" ,"blast_output_01.fasta" , package = "phyloR")
y <- Biostrings::readBStringSet(y_file)
## subset fasta by partial match
sub <- phyloR::subset_bstringset(x = x , y = y ,partial_match = T)
subset_bstringset <- function(x , y,  partial_match  = TRUE)
subset_bstringset <- function(x , y,  partial_match  = TRUE)
subset_bstringset(x , y,  partial_match  = TRUE)
x <-  c("EIT75269.1", "TGO19408.1", "KAF2153260.1", "OAA41719.1", "OSS52177.1", "XP_018252424.1", "XP_008598593.1", "KXN65110.1", "XP_018147989.1", "XP_022493698.1", "RII05464.1", "XP_018703519.1", "RZR67285.1", "OLY78428.1", "XP_007819064.1", "PQK17331.1", "KXN66278.1", "CRK21695.1", "CVK85925.1", "KID81639.1")
y_file <- system.file("extdata" ,"blast_output_01.fasta" , package = "phyloR")
y <- Biostrings::readBStringSet(y_file)
## subset fasta by partial match
sub <- phyloR::subset_bstringset(x = x , y = y ,partial_match = T)
subset_bstringset(x , y,  partial_match  = TRUE)
x <-  c("EIT75269.1", "TGO19408.1", "KAF2153260.1", "OAA41719.1", "OSS52177.1", "XP_018252424.1", "XP_008598593.1", "KXN65110.1", "XP_018147989.1", "XP_022493698.1", "RII05464.1", "XP_018703519.1", "RZR67285.1", "OLY78428.1", "XP_007819064.1", "PQK17331.1", "KXN66278.1", "CRK21695.1", "CVK85925.1", "KID81639.1")
y_file <- system.file("extdata" ,"blast_output_01.fasta" , package = "phyloR")
y <- Biostrings::readBStringSet(y_file)
## subset fasta by partial match
sub <- phyloR::subset_bstringset(x = x , y = y ,partial_match = T)
phyloR::subset_bstringset(x , y,  partial_match  = TRUE)
roxygen2::roxygenise()
library(phyloR)
pkgdown::build_site()
roxygen2::roxygenise()
roxygen2::roxygenise()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_home()
pkgdown::init_site()
pkgdown::build_home()
blst_out_file <- system.file("extdata" ,"blast_output_01.txt", package = "phyloR")
blast_out_file <- system.file("extdata" ,"blast_output_01.txt", package = "phyloR")
blast_out_file <- readr::read_delim(blast_out_file , delim = "\t")
blast_out_file <- system.file("extdata" ,"blast_output_01.txt", package = "phyloR")
blast_out_file <- readr::read_delim(blast_out_file , delim = "\t")
blast_out_file
blast_out_file
blast_out_file
blast_out_file <- system.file("extdata" ,"blast_output_01.txt", package = "phyloR")
blast_out_file
blast_out_file <- readr::read_delim(blast_out_file , delim = "\t")
blast_out_file <- system.file("extdata" ,"blast_output_01.txt", package = "phyloR")
blast_out_tbl <- readr::read_delim(blast_out_file , delim = "\t")
blast_out_tbl
blast_out_tbl
blast_out_tbl
blast_out_tbl <- readr::read_delim(blast_out_file , delim = "\t" , comment = "#")
blast_out_tbl
blast_out_tbl <- readr::read_delim(blast_out_file , delim = "\t" , comment = "#" ,col_names = F)
names(blast_out_tbl) <- phyloR::get_blast_outformat_7_colnames()
colnames(blast_out_tbl) <- phyloR::get_blast_outformat_7_colnames()
colnames(blast_out_tbl)
blast_out_tbl
filter1
filter1 <- blast_out_tbl %>% phyloR::filter_blast_hits(evalue = 1e-5)
filter1
blast_out_tbl
blast_out_tbl %>% phyloR::filter_blast_hits(evalue = 1e-5 , bit_score = 200)
?phyloR::filter_blast_hits()
blast_out_tbl %>% phyloR::filter_blast_hits(query_cov = 90, query_length = 253)
##  Filter blast hits : query coverage >= 1e-5
blast_out_tbl %>% phyloR::filter_blast_hits(query_cov = 90)
?phyloR::filter_blast_hits
blast_out_tbl %>% phyloR::filter_blast_hits(evalue = 1e-5, bit_score = 200, query_cov = 90, query_length = 253, identity = 90)
blast_out_tbl %>% phyloR::filter_blast_hits(evalue = 1e-5, bit_score = 100, query_cov = 90, query_length = 253, identity = 90)
blast_out_tbl
blast_out_tbl %>% phyloR::filter_blast_hits(evalue = 1e-5, bit_score = 200, query_cov = 90, query_length = 253, identity = 70)
blast_out_tbl %>% phyloR::filter_blast_hits(evalue = 1e-5, bit_score = 200, query_cov = 90, query_length = 253, identity = 60)
blast_out_tbl %>% phyloR::filter_blast_hits(evalue = 1e-5)
blast_out_tbl %>% phyloR::filter_blast_hits(bit_score = 200)
blast_out_tbl %>% phyloR::filter_blast_hits(query_cov = 90, query_length = 253)
blast_out_tbl %>% phyloR::filter_blast_hits(identity = 90)
blast_out_tbl %>% phyloR::filter_blast_hits(evalue = 1e-5, bit_score = 200, query_cov = 90, query_length = 253, identity = 60)
blast_out_tbl %>% phyloR::filter_blast_hits(identity = 90)
fa_file <- system.file("extdata" ,"blast_output_01.fasta", package = "phyloR")
fa_file
fa <- Biostrings::readBStringSet(fa_file)
fa
names(fa) %>% head()
fa %>% phyloR::format_fasta_headers() %>% head
fa_file %>% phyloR::format_fasta_headers() %>% head
pkgdown::build_home()
pkgdown::build_home()
blast_out_file <- system.file("extdata" ,"blast_output_01.txt", package = "phyloR")
blast_out_tbl <- readr::read_delim(blast_out_file , delim = "\t" , comment = "#" ,col_names = F)
blast_out_tbl
colnames(blast_out_tbl ) <- phyloR::add_taxonomy_columns()
blast_out_tbl
blast_out_tbl <- blast_out_tbl %>% phyloR::add_taxonomy_columns()
blast_out_tbl
blast_out_tbl <- blast_out_tbl %>% phyloR::get_blast_outformat_7_colnames()
colnames(blast_out_tbl) <- phyloR::get_blast_outformat_7_colnames()
colnames(blast_out_tbl)
colnames(blast_out_tbl)
with_kingdom
blast_out_tbl
with_kingdom <- blast_out_tbl %>% add_taxonomy_columns(ncbi_accession_colname = "subject_acc_ver")
with_kingdom <- blast_out_tbl %>% slice(1:10) %>% add_taxonomy_columns(ncbi_accession_colname = "subject_acc_ver")
with_kingdom
with_kingdom_and_species <- with_kingdom %>% add_taxonomy_columns(ncbi_accession_colname = "subject_acc_ver")
with_kingdom_and_species <- with_kingdom %>% add_taxonomy_columns(ncbi_accession_colname = "subject_acc_ver")
with_kingdom <- blast_out_tbl %>% slice(1:10) %>% add_taxonomy_columns(ncbi_accession_colname = "subject_acc_ver",
taxonomy_level = "kingdom")
with_kingdom <- blast_out_tbl %>% slice(1:10) %>% add_taxonomy_columns(ncbi_accession_colname = "subject_acc_ver",
taxonomy_level = "kingdom")
with_kingdom_and_species <- with_kingdom %>% add_taxonomy_columns(ncbi_accession_colname = "subject_acc_ver" ,taxonomy_level = "species")
with_kingdom_and_species
blast_out_file <- system.file("extdata" ,"blast_output_01.txt", package = "phyloR")
blast_out_tbl <- readr::read_delim(blast_out_file , delim = "\t" , comment = "#" ,col_names = F)
blast_out_tbl %>% phyloR::remove_redundant_hits()
blast_out_tbl
colnames(blast_out_tbl) <- phyloR::get_blast_outformat_7_colnames()
blast_out_tbl %>% phyloR::remove_redundant_hits()
pkgdown::buildhi
pkgdown::build_home()
pkgdown::build_home()
pkgdown::build_home()
roxygen2::roxygenise()
pkgdown::build_site()
pkgdown::buildhi
pkgdown::build_home()
pkgdown::build_home()
